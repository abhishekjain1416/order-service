spring.datasource.url=jdbc:mysql://localhost:3306/programmingtechie
spring.datasource.username=root
spring.datasource.password=Docquity@123
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
server.port=8081
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

# Circuit breaker
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j properties
# If you want to see all 3 states of circuit breaker, turn on health indicator here
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# If resilience4j circuit breaker sees some downtime, it should wait for some time from going closed to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# 50% requests are failing
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# It specifies how much time we wait in open state before going to half open or before executing fallback
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# If 3 requests failed in half open state, then it will again move to open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Resilience4j Timeout properties
# It will wait maximum of 3s to throw timeout exception if inventory service will take more time to respond
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

# Resilience4j retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.programmingtechie.orderservice.event.OrderPlacedEvent
